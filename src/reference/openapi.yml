openapi: 3.1.0
info:
  title: UnguessApi
  version: '1.0'
  description: An API to get all data for your bugfinding and ux research needs!
  contact:
    name: Developers
    email: it@unguess.io
servers:
  - url: 'https://api.unguess.io'
paths:
  /:
    get:
      summary: Get API description
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
      operationId: get-root
      description: Get all routes available for this apis
    parameters: []
  /authenticate:
    post:
      description: A request to login with your username and password
      summary: Authenticate to the API
      operationId: post-authenticate
      responses:
        '200':
          $ref: '#/components/responses/Authentication'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              examples:
                example-1:
                  value: string
      tags:
        - Authentication
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
            examples:
              example:
                value:
                  username: Elon71
                  password: my-strong-password
        description: A JSON containing username and password
      parameters: []
  /projects:
    get:
      description: Get all projects that you can view. A project is a collection of campaigns linked with your account.
      summary: Get All Projects
      tags:
        - Projects
      responses:
        '200':
          description: A list of projects
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: number
                        name:
                          type: string
                        description:
                          type: string
              examples:
                example-1:
                  value:
                    items:
                      - id: 1
                        name: My project
                        description: My project description
        '403':
          $ref: '#/components/responses/NotAuthorized'
        '404':
          $ref: '#/components/responses/NotFound'
      operationId: get-projects
      parameters:
        - schema:
            type: number
          name: my-parameter
          in: query
          required: false
          description: A generic query parameter
      security:
        - JWT: []
  /users/me:
    get:
      summary: Get user data
      tags:
        - User
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: number
                  email:
                    type: string
                  role:
                    type: string
                  tryber_wp_user_id:
                    type: number
                  profile_id:
                    type: number
                  name:
                    type: string
                required:
                  - id
                  - email
                  - role
        '403':
          $ref: '#/components/responses/NotAuthorized'
        '404':
          $ref: '#/components/responses/NotFound'
      operationId: get-users-me
      security:
        - JWT: []
components:
  schemas:
    User:
      title: User
      type: object
      description: ''
      properties:
        username:
          type: string
        name:
          type: string
        surname:
          type: string
        email:
          type: string
          format: email
        image:
          type: string
          format: uri
        id:
          type: integer
        wp_user_id:
          type: integer
        role:
          type: string
        is_verified:
          type: boolean
      x-examples:
        example-1:
          value:
            username: string
            name: string
            surname: string
            email: user@example.com
            image: 'http://example.com'
            id: 0
            wp_user_id: 0
            role: string
            is_verified: true
    Project:
      title: Project
      type: object
      x-examples:
        example-1:
          name: string
          campaigns:
            - name: string
              customer_title: string
              internal_id: string
              dates:
                start: string
                end: string
                close: string
              status: true
              language: string
              public: true
              hasBugParade: true
              devices:
                - id: string
              minNumberOfMedia: 0
              titleRule: true
              allowed:
                severities:
                  - id: string
                bug_types:
                  - id: string
                replicabilities:
                  - id: string
              projectManager:
                id: 0
                name: string
              customerCanViewReviewing: true
              additionalFields:
                - id: string
              id: 0
      properties:
        name:
          type: string
  securitySchemes:
    JWT:
      type: http
      scheme: bearer
      description: ''
  responses:
    UserData:
      description: A user
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
          examples:
            example:
              value:
                username: Elon71
    Authentication:
      description: Authentication data. The token can be used to authenticate the protected requests
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: number
              firstName:
                type: string
              lastName:
                type: string
              token:
                type: string
              username:
                type: string
          examples:
            example:
              value:
                id: 42
                firstName: Elon
                lastName: Musk
                token: my-jwt-token
                username: Elon71
    NotFound:
      description: An error due to the resource not existing
      content:
        application/json:
          schema:
            type: object
            properties:
              element:
                type: string
              id:
                type: integer
              message:
                type: string
            required:
              - element
              - id
              - message
          examples:
            example-1:
              value:
                element: campaign
                id: 1
                message: No campaign with id 1
    MissingParameters:
      description: An error due to missing required parameters
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
            required:
              - message
          examples:
            example:
              value:
                message: Missing parameters
    NotAuthorized:
      description: An error due to insufficient authorization to access the resource
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
          examples:
            example:
              value:
                message: Not Authorized.
  parameters:
    campaign:
      name: campaign
      in: path
      required: true
      schema:
        type: string
      description: A campaign id
    task:
      name: task
      in: path
      required: true
      schema:
        type: string
      description: A task id
    customer:
      name: customer
      in: path
      required: true
      schema:
        type: string
      description: A customer id
    project:
      name: project
      in: path
      required: true
      schema:
        type: string
      description: A project id
    limit:
      name: limit
      in: query
      required: false
      schema:
        type: integer
      description: Max items to retrieve
    start:
      name: start
      in: query
      required: false
      schema:
        type: integer
      description: Items to skip for pagination
    filterBy:
      name: filterBy
      in: query
      required: false
      schema:
        type: object
      description: Key-value Array for item filtering
    order:
      name: order
      in: query
      required: false
      schema:
        type: string
        enum:
          - ASC
          - DESC
        default: DESC
      description: 'How to order values (ASC, DESC)'
    locale:
      name: locale
      in: query
      required: false
      schema:
        type: string
        enum:
          - en
          - it
        default: en
      description: How to localize values
    searchBy:
      name: searchBy
      in: query
      schema:
        type: string
      description: A comma separated list of fields which will be searched
    search:
      name: search
      in: query
      required: false
      schema:
        type: string
      description: The value to search for
tags:
  - name: Authentication
  - name: Campaign
  - name: Customer
  - name: Projects
  - name: Task
  - name: User
  - name: Admin
  - name: Devices
